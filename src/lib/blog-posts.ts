import type { BlogPosts } from "../types/blog";

export const blogPosts: BlogPosts = [
  {
    title:
      "Building the Engineering Capacity Planner - Solving the Resource Planning Puzzle",
    description: "Capacity planning for EventMachine applications",
    date: "2024-09-04T00:00:00.000Z",
    tags: ["performance", "scaling", "architecture"],
    image:
      "https://bs-uploads.toptal.io/blackfish-uploads/components/blog_post_page/4093803/cover_image/regular_1708x683/0309_Your_role_in_delivering_great_products_as_an_Engineering_Manager_Zara_Newsletter___blog-67996821bb55e5b0e2a07a80a6392013.png",
    draft: false,
    slug: "em-capacity-planning",
    content:
      "\nIn my career as a software engineering manager, I've experienced the art of resource planning firsthand. And trust me, it’s as much an art as it is a science. Managing people’s time effectively is like trying to hit a moving target—factors like public holidays, employee absences, personal holiday allowances, and unexpected sick days constantly shift the balance. Not to mention, some team members (like myself at times) juggle between leadership responsibilities and individual contribution, making it even more challenging to get an accurate read on capacity.\n\n## So, What is Resource Planning, and Why Do We Need It?\nHold on. Let’s not get ahead of ourselves. First, what exactly is resource planning, and why is it such a big deal? According to the formal definition from the [Project Management Institute](https://www.pmi.org/learning/library/resource-planning-project-management-10567),\n\n> Resource planning is a process of determining the resources required to complete the project. It is a critical part of project management that involves estimating the resources needed to complete the project. Resource planning helps to ensure that the project is completed on time and within budget. It also helps to identify any potential risks that may arise during the project.\n\nSounds very textbook, doesn’t it?\n\nIn my experience, the definition boils down to this: As a manager, whether in engineering or any other domain, you need to know your team’s capacity. Without this knowledge, you risk either overcommitting and burning out your team or underutilising them, which leads to missed deadlines and opportunities. It’s like packing for a trip—you don’t want to overstuff your suitcase, but you also don’t want to leave out essentials. Balance is key!\n\n\n## The Resource Planning Problem: It's Not as Simple as Counting Heads\nYou might think resource planning is straightforward—just count how many people you have, and you’re done, right? Not quite. There are layers to this challenge, especially in an engineering setting. Here’s why:\n\n1. **Bank Holidays**: Depending on your region, these can vary widely, and not accounting for them can give you an inflated sense of available workdays.\n2. **Absences & Sick Leaves**: People need time off, whether planned or unplanned, and each day someone is out, your team’s capacity drops.\n3. **Holiday Allowances**: Many employees have unused vacation days, and if you don’t account for them in your planning, you could face a last-minute rush.\n4. **Mixed Roles**: Some members of your team might split their time between management and actual coding (again, speaking from experience!). These folks aren’t at 100% availability for hands-on work, so adjustments need to be made.\n\nAll these factors make resource planning a bit like solving a Rubik’s cube—twist one side, and everything else shifts.\n\n## The Solution: Enter the Engineering Capacity Planner\nFrustrated by the guessing game that resource planning can sometimes feel like, I built a tool that takes the headache out of the process: the Engineering Capacity Planner. This tool is designed specifically to help engineering managers (and honestly, anyone who leads a team) calculate their team’s true capacity over a given period.\n\nHere’s how the tool tackles the problem:\n\n- **Tracking Absences**: It keeps track of every type of absence—planned holidays, sick leaves, and even half-days. You won’t be blindsided by any unexpected gaps in availability.\n- **Factoring in Holidays**: The tool automatically accounts for public and bank holidays, making sure your calculations aren’t thrown off by a long weekend or national celebration.\n- **Adjusting for Mixed Roles**: If someone splits their time between management and development, you can assign an \"engineering factor\" to adjust for their reduced availability. That way, no one is overbooked or underutilized.\n- **Capacity vs. Commitment**: The planner gives you a snapshot of your team's total capacity versus how much work is already committed. It’s an immediate, visual representation of whether your team is in danger of overcommitting—or if you have room for more work.\n\nYou can find this nifty tool here: [Engineering Capacity Planner](https://github.com/JIAZHEN/em-capacity-app)\n\n## The Bottom Line: How Much Can My Team Really Achieve?\n![image info](./../../images/em-capacity-planning_img1.png)\n\nAfter putting all this into practice, you can finally answer that elusive question: “How much work can my team realistically achieve in a given time frame?”\n\nLet’s say your team has 1,000 days of capacity between now and the end of the year. The planner shows that you’ve already committed to 200 days of work. With this information, you have a clear idea of how to prioritize and allocate resources without running your team into the ground or letting valuable time slip away.\n\nThe Engineering Capacity Planner is not just a tool for engineering managers—it’s for anyone who needs to effectively plan resources. Whether you’re managing a product team, a marketing department, or any other team where time is money, this tool can give you that golden insight into what your team can really achieve.\n\nSo, no more guesswork. Resource planning doesn’t have to be a mystery anymore!\n",
  },
  {
    title: "Building ETL with AWS CDK in Python",
    description: "Building ETL pipelines using AWS CDK and Python",
    date: "2022-01-08T00:00:00.000Z",
    tags: ["devops", "aws", "python", "etl"],
    image:
      "https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/01/15/cdk-logo6-1260x476.png",
    draft: false,
    slug: "building-etl-with-aws-cdk-in-python",
    content:
      "\nHere is the github repository. It is to demonstrate how to use AWS CDK to build a serverless ETL application.\n\nIt's written in Typescript\nhttps://github.com/JIAZHEN/etl-serverless\n",
  },
  {
    title: "Colour Detection",
    description: "Implementing color detection in computer vision applications",
    date: "2018-05-03T00:00:00.000Z",
    tags: ["machine-learning", "computer-vision", "automation"],
    image: "https://i.ytimg.com/vi/05PYXwBw3Z0/maxresdefault.jpg",
    draft: false,
    slug: "colour-detection",
    content:
      "\n## Background\nIn the world of Fashion AI, we have thousands of products to process every day. One of the most important tasks is to identify the colour of the product. While luckily we have a team of 30+ stylists to manually pick up the colours, we've been trying from extracting colour keywords to complicated text classification with machine learning. Neither of them provides a satisfying result.\n![image](https://user-images.githubusercontent.com/1108303/39967605-90054394-56b6-11e8-9b73-576637e11605.png)\n\n## Counting the pixels\nSo I thought the better approach is to get the most commonly used colour on the image, by using Python and [Pillow](http://pillow.readthedocs.org/en/latest/). It doesn't work well as the background colour (which is white in the case) is obviously the most commonly used colour. Clearly, we need to remove the background from the product image.\n![image](https://user-images.githubusercontent.com/1108303/39967715-cb1988a8-56b8-11e8-9880-e0e732731410.png)\n\n## Removing the background\nThe technique that we use to solve this problem is [Grabcut](https://docs.opencv.org/3.4/d8/d83/tutorial_py_grabcut.html) provided by OpenCV. The algorithm required a rectangle that definitely includes the target object, so I make an assumption that the product will always be in the centre of the image. The result is as below\n![image](https://user-images.githubusercontent.com/1108303/39967849-ce2727a6-56ba-11e8-9da8-b1efec4a04e2.png)\n\nPerfect! Then we run the most commonly used colour algorithm clearly the blue colour is picked up. But it's not good enough yet. What if we want to identify multiple colours on the image? And if the colour is gradient the mostly used colour cannot represent the group of a colour.\n\n## K-Meaning Clustering\nInspired by Charles Leifer's [post](http://charlesleifer.com/blog/using-python-and-k-means-to-find-the-dominant-colors-in-images/), I use the K-Means algorithm to separate the pixels into K groups (clusters) of similarly coloured pixels. Also, to solve the multiple colours issue I use the MeanShift algorithm as stated in the Xingming Zheng&Ningzhong Liu's [paper](https://ieeexplore.ieee.org/document/6330097/) _Color recognition of clothes based on k-means and mean shift_\n\n![image](https://user-images.githubusercontent.com/1108303/39968025-4826dd82-56be-11e8-911f-ddcb6a9fb90a.png)\n\nAwesome! We've detected all the colours on the image and the blue is the absolute predominant colour.\n\n## Name that colour\nThe colour in computer science is just a value, quite often it is presented as RGB value. But in the real world, humans need a name to a colour so that we can refer it. That a much more difficult task than it looks. Everyone sees colours differently ...\n\n![image](http://www.thedoghousediaries.com/dhdcomics/2010-03-01-12bf011.png)\n\nThanks to [XKCD's colour survey](https://blog.xkcd.com/2010/05/03/color-survey-results/), we have 200,000 RGB values with a name. By matching those RGB values with our colour system, we use K-NN classification to train a model so that we can convert a predicted RGB value to the correct name.\n\nNote that we shouldn't use Euclidean to compute the colour distance as human perception on brightness won't take into account. There are [other algorithms](https://en.wikipedia.org/wiki/Color_difference) that try to fix this issue, eventually, I find `CIEDE2000` works for the best in this case.\n\n![image](https://user-images.githubusercontent.com/1108303/39968164-a0326d3c-56c0-11e8-910f-48dbf97bc039.png)\n\nFinally, we've got the accuracy score up to `88%` in our colour detection which I'm so proud of \\o/\n",
  },
  {
    title: "How I achieved 83% accuracy in auto-labelling on production",
    description: "Achieving high accuracy in automated production labeling",
    date: "2018-01-04T00:00:00.000Z",
    tags: ["machine-learning", "automation", "ai", "experience"],
    image:
      "https://itsupplychain.com/wp-content/uploads/2022/03/AdobeStock_170135489.jpg-900-x-636.jpg",
    draft: false,
    slug: "how-i-achieved-83-accuracy-in-auto-labelling-on-production",
    content:
      "\n## Description\nPreviously in Dressipi, the Auto-Labelling worked as extracting feature keywords from garment title and description, then passed onto stylists to moderate the auto-labelled features. That means engineers have to maintain a list of keywords for each partner on per category basis, then requires human resources to inspect all of them.\n\nWe would like to predict the correct garment features from the garment title and description, by using Machine Learning. Furthermore, one of the targets is to 100% automate some features labelling, namely, not require human resources to moderate the predicted garment features.\n\n## Technical considerations\nThe garment population program is run in Ruby, it auto-labels new garment sequentially. Namely, the model will be called while the ruby program is running. Therefore the prediction model will need to be called by Ruby, in real-time.\n\n## Category prediction\nPredicting garment category from the description and title was the first task we tackled. \n[AWS Machine Learning](https://aws.amazon.com/machine-learning/) was a great option, in this case, it allows us to train the model and enable a real-time prediction endpoint with hassle-free. By feeding one year’s garment feed records (essential attributes are brand name, product name and description), we successfully implemented models with `92%` overall accuracy! Moreover, the category real-time prediction endpoint works perfectly on production. As a result, we quickly rolled out the models on production.\n\n## Feature prediction\nThe second task was to build Machine Learning models to predict garment features. With the great success in AWS Machine Learning, we instinctively tried to build models with it. By feeding with garment title, long description, short description, category name and feature category name, with AWS Machine Learning we only got `65%` overall accuracy, which was obviously not good enough. Besides, we didn’t have much control of the AWS Machine Learning model such as changing the algorithm. As the rise of AI as well as the popularity in Python, we naturally turned onto the other direction - [Scikit-Learning](http://scikit-learn.org/stable/).\n\nFirst of all, we put all texts (such as description, title, garment material) in [bag-of-words](https://en.wikipedia.org/wiki/Bag-of-words_model) model, preprocess the data by removing HTML, special characters and stop-words. Then, converting the string of words to a matrix of [TF-IDF](https://en.wikipedia.org/wiki/Tf%E2%80%93idf) features so that it’s ready to be fed into a machine learning model. In order to find the best suitable model, we do the cross valuation by models in which comparing algorithms like [Logistic Regression](https://en.wikipedia.org/wiki/Logistic_regression), [K-nearest Neighbors](https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm), [Decision Tree](https://en.wikipedia.org/wiki/Decision_tree), [SVM](https://en.wikipedia.org/wiki/Support_vector_machine) and [Random Forest](https://en.wikipedia.org/wiki/Random_forest).\n\n![cross-val-by-models](https://user-images.githubusercontent.com/1108303/34576368-a3403df2-f175-11e7-9355-7bffd69a4ae9.png) \n\nAs you can see in the resulting image, the first number is the mean value of cross valuation while the later is the standard deviation of it. It is clear that Random Forest algorithm is the best choice for now.\n\nThere’s a problem here, product title is shorter than the description and the word in it should have more weights than in the description. So instead of using bag-of-words, we switch to feature union which could deal with title and description separately, in a different weight. At the end, we completed the model with overall `83%` accuracy! How great it is!\n\n![image](https://user-images.githubusercontent.com/1108303/34576467-e1c21a78-f175-11e7-9307-fc99405fdb56.png)\n\n# Production engineering\nAlthough we successfully trained the model, from the software engineering point of view, there’s a challenge ahead - how to use the sciki-learn built the model in ruby in real-time ... There was a lot to consider: load the trained models into memory, sending garment data from ruby process to Python process and getting the prediction, avoiding deadlock in lower level streams ... Long story in short, we eventually used IO pipe (Open3.popen3 in ruby) to implement the real-time prediction endpoint (Be aware of memory usage, stdout/stdin deadlock and error handling! - this could be another post).\n\n# Review the auto-labelling statistics\nAfter rolling out the scikit-learn models to auto-labelling, it’s time to review the accuracy performances. At the beginning, we calculate the percentage of the number of features in auto feature sets that is actually in final feature sets of garments. Since `2017-12-15` to `2018-1-2`, \n\n```\nTotal predicted features: 57, 294\nTotal wrongly predicted features: 3, 272\nOverall accuracy: 94.29%\n```\n\nAlso, by comparing to the period between `2016-12-15` and `2017-1-3` and the one between `2017-12-15` and `2018-1-2`, looking at the garment feature categories that are using Random forest model, the accuracy rates have gone up at least twice (See the screenshot below). Further, we have a few 100% rate on some garment feature categories.\n\n![image 1](https://user-images.githubusercontent.com/1108303/34576687-a66f6ede-f176-11e7-921d-bda5531ce80e.png)\n## Things have been tried\n[AWS Sagemaker](https://aws.amazon.com/sagemaker/) - great service includes hosted Jupyter notebooks that make it is easy to explore and visualize the training data stored in Amazon S3. It allows to use custom algorithm like the one we do in Scikit-Learn. Once model is built, it’s production ready and fully-managed by AWS. So we can avoid all the pains in IO pipes.\n\n[Forest-confidence-interval](http://contrib.scikit-learn.org/forest-confidence-interval/) - This package adds to scikit-learn the ability to calculate confidence intervals of the predictions generated from Random Forest. This is an implementation of an algorithm developed by Wager et al. [Wager2014](http://contrib.scikit-learn.org/forest-confidence-interval/#wager2014) and previously implemented in R. We want to quantify the confidence level of a prediction result so that the auto-labelled features can be 100% automated. We haven’t decided how should use it. Examples are as below:\n![wallis-nylon - stretch](https://user-images.githubusercontent.com/1108303/34579712-19f8a36a-f182-11e7-9bf4-659e6951b5bd.png)\n![wallis-polyesterpolyamide - stretch](https://user-images.githubusercontent.com/1108303/34579740-36183010-f182-11e7-97d1-cf5c460b7245.png)\n\n[Random Forest predict_proba](http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html) - Rather than predicting the most likely feature name directly, get the probabilities of each feature. We could probably define a threshold saying “if the probability of a garment’s fibre being ViscoseRayon - Mix is over 0.7, we confident that’s correct”\n![con-wallis-viscoserayon - mix](https://user-images.githubusercontent.com/1108303/34579852-9c3fcfba-f182-11e7-8824-c04b90739714.png)\n",
  },
  {
    title: "婴儿推车市场",
    description: "Personal reflections and experiences",
    date: "2017-02-25T00:00:00.000Z",
    tags: ["personal", "experience"],
    image: "https://pic2.zhimg.com/v2-a894dab3e4948ecbede1b7199ec4319d_b.jpg",
    draft: false,
    slug: "baby",
    content:
      '\n## 需求\n由于现代社会的快节奏生活，父母既不愿疏忽照顾新生儿，又不愿对社交和休闲等个人需求妥协。所以现在许多父母需要安全，方便的婴儿护理用品，如婴儿推车。\n\n## 全球市场\n![Baby Trolley Global Market Size](/assets/images/posts/GgdBW9j.jpg)\n_数据来源: Technavio_\n\n2016年全球的婴儿推车的市场是 $28.5 亿美元（￥195.86 亿人民币），市场大小接近2014年的中国移动游戏行业市场（￥220亿 - from TalkingData）。非洲的高人口增长率将继续带动市场的发展。中国虽然国情不同（老一辈会帮忙照顾婴儿），随着年轻白领成家和二胎政策，在北上广深等国际城市的婴儿车需求也会大大提高。预计2021年其市场大小将达到 $3.775 亿美元（￥259.43 亿人民币 - 按当前汇率）。\n\n## 厂商与特点\n全球市场上的婴儿推车厂商主要有 Baby Jogger, Bebecar, Bugaboo, Chicco, iCandy, Bebetto, Brevi, Britax, Coletto, Concord, Go-Go Babyz, Hartan, Inglesina, Joovy, Mamas and Papas, Mazi-Cosi, Mima, Mothercare, Mountain Buggy, Peg Perego, phil&teds, Quinny, Recaro, Silver Cross, Stokke, Thule, Tutek, UPPAbaby. 如此之多的品牌，不难想象他们每一家都有自己独特的理念与独特的设计。\n\n- 1997年，Graco首创将 ”轻松提，安全卡” 的四合一推车，电动摇篮，单手收车功能等引进英国市场。\n- Bugaboo 鼓励父母带上孩子看世界，着重于推车的多功能，适应城市，沙滩，雪地等等地形。\n- 2007年，Baby Jogger推出可装卸的推车，取得 "Lightweight Buggy" 项目金奖。\n- Sliver Cross，号称婴儿推车中的“劳斯莱斯”，主打精致外观和舒适度。\n\n著名的互联网公司 Whatsapp，2009年五月首次发布并没有得到认可。直到一个月后苹果在iOS 3.0 中发布消息推送功能，让 Whatsapp 用户的状态更新可以推送到手机联系人，应用下载和使用率上升200%。可见品牌定位，精确自己的客户群是成功厂商的标识。\n\n## 发展\n![E-commercing Baby Trolley](/assets/images/posts/n0eoDyt.jpg)\n数据显示，2016年婴儿车最主要的功能是 `舒适度`，占总市场需求的 63.23%。而婴儿用品的网上零售额有望在 2019 年达到 $2.7 万亿。所以，全大厂商会在舒适性和网上选购等方面继续创新。\n\n各大品牌的官方零售网站都有 360 度商品浏览功能 （2017最近发布的 [VR 套装](https://techcrunch.com/2017/02/23/the-hardlight-vr-suit-will-vibrate-all-of-your-bodily-buttons/) 让你感受敌人的愤怒）。在 “2016 VR 元年”之后，相信 VR 技术也会为婴儿用品的网上零售提供更好的体验。健康环保的原材料不仅是普通顾客的首选，也应该是厂商的首选。\n',
  },
  {
    title: "《大型网站技术架构》总结",
    description:
      "A comprehensive guide to modern web application architecture patterns and best practices",
    date: "2016-12-22T00:00:00.000Z",
    tags: ["web", "architecture", "design"],
    image:
      "https://brianway.github.io/img/blog/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1.png",
    draft: false,
    slug: "web-app-architecture",
    content:
      "\n# 开始\n一如我们开始网站开发时制作个人主页，起初它完全可以被部署在一个小型计算机或者个人电脑（以下统称服务器），应用程序，网站资源和数据库等都在这一台服务器中。随着访问量和业务的增加\n\n# 前端架构\n- 浏览器优化技术。既优化响应页面，常用有 **页面缓存**、**合并 HTTP 减少请求次数**、**使用页面压缩**等。\n- CDN，使用户可以通过最短路径获取内容。\n- 静态资源独立部署，如 JS、CSS 等文件部署在专门的服务器上，并使用专门的（二级）域名。\n- 图片服务。如静态资源一样，独立部署在图片服务器集群上，并使用独立的（二级）域名。\n- 反射代理。\n- DNS，将域名解析成 IP 地址，利用 DNS 可以实现 DNS 负载均衡。\n\n# 应该层架构\n- 开发框架，分离关注面，全美工，开发工程师各司其职。同时内置一些安全策略，防护 Web 应用攻击。\n- 页面渲染，将动态内容和静态页面模板集成，组成最终显示给用户的完整页面。\n- 负载均衡，将多台服务器组成一个集群，通过此技术将用户请求分发到不同的服务器上，以应对大量用户同时访问时产生的高并发负载压力。\n- Session 管理， 为了实现高可用的应用服务器集群，应用服务器通常设计为无状态，不保存用户请求上下文信息，但是网站业务需要保持用户会话信息，需要专业的机制管理 Session，使集群内甚至跨集群的应用服务器可以共享 Session。\n- 动态页面静态化，对于访问量特别大而更新不是很频繁的动态页面，可以装饰其静态化，即生成一个静态页面，利用静态页面的优化手段加速访问，如反射代理、CDN、浏览器缓存等。\n- 业务拆分，将复杂庞大的业务拆分成多个小规模的产品，独立开发、部署、维护。\n- 虚拟化服务器，将一台物理服务器虚拟化成多台虚拟服务器。\n\n# 服务层架构\n- 分布式消息，利用消息队列，实现业务和业务、业务和服务之间的异步消息发送及低耦合。\n- 分布式服务\n- 分布式缓存\n- 分布式配置（？）\n\n# 存储层架构\n- 分布式文件\n- 关系数据库，根据业务配置将数据库访问路由到不同的物理数据库上，可实现关系数据库的分布式访问\n- NoSQL 数据库。\n- 数据同步，在实践中，为了减轻数据库压力，将数据库的事务日志（或者 NoSQL 的写操作 Log）同步到其他数据中心，根据 Log 进行数据重演，实现数据同步。\n\n# 后台架构\n处理非实时数据。\n\n- 搜索引擎\n- 数据仓库\n- 推荐系统\n\n# 数据采集与监控\n- 浏览器数据采集，通过在网站页面嵌入 JS 脚本。\n- 服务器业务数据采集\n\t\t+ 一种是采集在服务器端记录的用户请求日志\n    + 一种是采集应用程序运行期业务数据，比如待处理消息数据等。\n- 服务器性能数据采集，如系统负载、内存使用、网上流量等。\n- 系统监控，将采集的数据可视化，更进一步是自动化处理异常。\n- 系统报警，采集来的数据超过预设的正常情况的阙值，通过邮件、短信、语音电话等发出报警信号。\n\n# 安全架构\n- Web 攻击，以 HTTP 请求的方式发起的攻击，如 XSS 和 SQL INJECT。\n- 数据保护，敏感信息加密。\n\n# 数据中心机房架构\n- 机房架构，对于一个拥有十万台服务器的大型网站，每台服务器耗电（包括服务器本身和空调）每年大约要 200 人民币，网站每年机房电费就需要两亿。数据中心能耗问题已日趋严重。\n- 机柜架构\n- 服务器架构，多用定制。\n",
  },
  {
    title: "Rails performance tips",
    description:
      "Essential performance optimization tips for Ruby on Rails applications",
    date: "2016-11-24T00:00:00.000Z",
    tags: ["ruby", "rails", "performance", "optimization"],
    image:
      "https://thecodest.co/images/uploaded/ways_to_increase_your_rails_performance.png",
    draft: false,
    slug: "rails-performance-tips",
    content:
      "\n> Remember, Ruby takes a large memory footprint. So, for example, to process 1G of data you might need 3G and more of memory.\n\n- When use `model.all`, rethink, is it good to load everything in memory? What if the table gets bigger and bigger.\n- MongoDB `aggregate pipeline`.\n- Use `activerecord::transaction` when creating lots of rows. It's not only protect data conformity but also perform batch actions.\n- Has_many relation, use `user.store_ids` is faster than `user.stores.map(&:id)`\n- See if be able to use `model.find_each`\n- After use `File.new`, remember to `file.close`\n\n\n# ActiveRecord\n> If you have a 1G of data in the table, ActiveRecord representation of it will take 2G and, in some cases, more.\n\n- Bulk update\n\n\t```\n  Book.where('title LIKE ?', '%Rails%').update_all(author: 'David')\n\t```\n  \n# Unicorn\n- To turn on application preloading, simply include this line into your unicorn configuration file:\n\n\t```\n  preload_app true\n\t```\n- Ruby allocates memory in two heaps. All Ruby objects go to Ruby's own heap. Each object has 40 bytes (on a 64-bit system) to store its data. When object needs to store more, it will allocate space in operating system's heap. When object is garbage collected and then freed, the space in the operating system's heap goes back to the operating system of course. But the space reserved for the object itself in Ruby heap is simply marked as free. *This means that Ruby heap can only grow.*\n- Limit memory in unicorn\n\t\t\t\n      ```\n      class Unicorn::HttpServer\n       KIND_MEMORY_LIMIT_RSS = 150 #MB\n\n       alias process_client_orig process_client\n       undef_method :process_client\n       def process_client(client)\n        process_client_orig(client)\n        rss = `ps -o rss= -p #{Process.pid}`.chomp.to_i / 1024\n        exit if rss > KIND_MEMORY_LIMIT_RSS\n       end\n      end\n      ```\n",
  },
  {
    title: "Using Yarn with Rails",
    description:
      "How to integrate Yarn package manager with Ruby on Rails applications",
    date: "2016-11-17T00:00:00.000Z",
    tags: ["ruby", "rails", "javascript", "frontend"],
    image:
      "https://images.ctfassets.net/1qj7i7j2q7hx/3ODwerz6BHAXQmGsCJjNLm/5c2dac6e099d4586404956a901f6ddde/1_p9SEAYl2BT71uInsGmhgLA.png",
    draft: false,
    slug: "using-yarn-with-rails",
    content:
      '\n# Background\nAs the rise of Javascript, it\'s undeniable that we would need to use Javascript libraries to get better user experiences on the web application. In Rails, however, adding a Javascript library is not as smoonth as adding a gem. \n\nYou could download the javascript library and manually put it in `vendor`. However, the responsiblities of configurations and correcting font paths are on you. Or maybe rely on a relavant gem if luckily find it. But what if the gem is no longer maintained?\n\nLook at Javascript ecosystem, [npm](https://www.npmjs.com/), [bower](https://bower.io/) and the most recent - [yarn](https://yarnpkg.com/), they are meant to manage Javascript libraries, so why don\'t we use one of them?\n\n# Install Yarn\nI decided to use Yarn in which is a fascinating package manament tool as introduced in my [previous post](https://sheerdevelopment.com/posts/facebook-js-5). So firstly we need to install Yarn. With MacOS just install it with brew\n```\nbrew update\nbrew install yarn\n```\n\nAnd add `export PATH="$PATH:$HOME/.yarn/bin"` to your profile (this may be in your `.profile`, `.bashrc`, `.zshrc`, etc.)\n\nTest that Yarn is installed by running:\n```\nyarn --version\n# 0.16.1\n```\n\n# Initialise a Rails project\nFirst of all, initialise a new Rails project, run:\n```\nrails new yarn-with-rails\ncd yarn-with-rails\n```\n\nAnd create a test page\n```\nrails g controller static_pages show\nrails s\n```\n\nYou should be able to see the test page on [http://localhost:3000/static_pages/show](http://localhost:3000/static_pages/show) as below\n\n![StaticShow](/assets/images/posts/8vi2Waz.png)\n\nNext to initialise yarn\n```\nyarn init\n```\n\nOK, it\'s time to do the actual experiment.\n\n# Rails with Yarn\nI will use [FontAwesome](http://fontawesome.io/) for this experiment. Run:\n```\nyarn add font-awesome --modules-folder ./vendor/assets/components/\n```\n\nThe latest font-awesome library is now installed in the Rails project! Add the following to `config/initializers/assets.rb`:\n\n```\nRails.application.config.assets.paths << Rails.root.join("vendor", "assets", "components")\n```\n\nRename `app/assets/stylesheets/application.css` to `app/assets/stylesheets/application.scss` and change the contents to the following:\n```\n/*\n * This is a manifest file that\'ll be compiled into application.css, which will include all the files\n * listed below.\n *\n *= require font-awesome/scss/font-awesome\n */\n```\n\nNow can use awesome icons on our test page! In `app/views/static_pages/show.html.erb`, add\n```\n<p>\n  I <i class="fa fa-heart" aria-hidden="true"></i> Ruby\n</p>\n```\n\nRestart the server and visit [http://localhost:3000/static_pages/show](http://localhost:3000/static_pages/show), font-awesome is on the page! \\o/\n\n![static page with font awesome](/assets/images/posts/GY8zWjD.png)\n\n# Font path dependency\nOn development it\'s now perfect. However, if we deploy to production (on Heroku in my case), the icon is not showing and has issue with incorrect font path. We need to overwrite `$fa-font-path` to point to the correct path.\n\nCreate `app/assets/stylesheets/font-path-overwrite.scss` and add:\n```\n$fa-font-path: "font-awesome/fonts/";\n```\nThen change `app/assets/stylesheets/application.css`:\n```\n\n/*\n * This is a manifest file that\'ll be compiled into application.css, which will include all the files\n * listed below.\n *\n *= require font_path_overwrite\n *= require font-awesome/scss/font-awesome\n */\n```\nThat\'s it!\n\n# Conclusion\nSo now with Yarn, we can easily retrieve the appropriate Javascript libraries and manage them. The feeling is as using the right tool for the job, saving time with the most elegant way. I love Ruby, Rails is my most favourite web framework, hope this can make it better. If you have any question, feel free to comment or drop me a line.\n',
  },
  {
    title: "Facebook 新发布的 Yarn JS 包管理器的 5 大功能",
    description: "Integrating Facebook JavaScript SDK in web applications",
    date: "2016-11-15T00:00:00.000Z",
    tags: ["web", "javascript", "facebook", "integration"],
    image:
      "https://miro.medium.com/v2/resize:fit:1200/1*BCPTI5sT2C9JH76__X2WUg.png",
    draft: false,
    slug: "facebook-js-5",
    content:
      "\n```\n本文由 伯乐在线 - Jiazhen Xie (@Joe_大熊猫) 翻译，艾凌风 校稿。未经许可，禁止转载！\n英文出处：[Prosper Otemuyiwa](https://auth0.com/blog/five-things-you-can-do-with-yarn)\n```\n简而言之: 在 Javascript 中有很多软件包管理器，比如 npm，bower，component，和 volo 等等。在笔者写这篇文章时，npm 是目前最流行的 Javascript 软件包管理器。通过 npm 客户端可以获取到 npm registry 里成千上万的代码库。就在几天前，Facebook发布了一个新的 Javascript 软件包管理器，名为 Yarn，并声称它比 npm 更快，更可靠，更安全。接下来，本文将介绍Yarn的五大功能。\n\nYarm 是 Facebook 开发的一个新 Javascript 软件包管理器。它为 Javascript 程序员提供了快速，可靠和安全的依赖包管理。以下是 Yarn 的五大功能。\n\n# 可离线工作\n\nYarn 拥有离线工作的能力。具体来说既是，之前安装过的软件包可在离线状态下再次安装，不需要网络连接。典型的例子如下：\n\n当有网络连接时，笔者通过 Yarn 安装了两个软件包：\n\n用 `yarn init` 创建了一个 package.json\n\n用 yarn 安装 express 和 jsonwebtoken\n\n\n安装完毕\n\n在安装写成后，笔者直接把原目录里的 node_moduels 删除并断开网络连接，然后运行 yarn:\n\n\n_Yarn 在离线状态下安装了软件包_\n\nVoilá! 两秒之内所有的软件包就再次被安装。显然，Yarn 缓存了下载过的软件包所以不用再次下载。同时它并行化的操作最大化地使用了资源，使得安装速度前所未有地快。\n\n# 从多个 registry 安装\n\nYarn 支持从不同的 registry 中安装 Javascript 软件包，比如从 npm, bower, git repository，甚至是本地文件。\n\n默认情况下，它会从 npm registry 搜索并安装软件包：\n\n```\nyarn add <pkg-name>\n```\n\n也可以安装通过远程的 gzipped tarball 安装包：\n\n```\nyarn add <https://thatproject.code/package.tgz>\n```\n\n或者通过本地的文件系统安装：\n\n```\nyarn add file:/path/to/local/folder\n```\n\n这对于经常发布 Javascript 软件包的程序员特别地有帮助。因为可以在发布前通过 Yarn 安装到本地进行测试。\n\n安装在 git resository 的包：\n\n```\nyarn add <git remote-url>\n```\n\nYarn 也会自动探测在 bower registry 是否有 git repository ，如有会把它当成一个来自 git repository 的包一样对待，进行安装。\n\n\n# 快速获取软件包\n\n假如你使用过 npm，你一定有过这样的经历：运行 npm install，去看个电影再回来查看是否所以所有包已经安装完成。当然，这有点夸张，但是 npm 真的花了很多时间在遍历依赖包树和下载依赖包。用 Yarn 的话，安装时间则已从几分钟缩减到几秒钟。\n\nYarn 把请求高效地排序好并避免瀑布式的请求，以最大化地使用网络。它首先把请求发送到 registry 并同时递归地查找每一个依赖包。接下来，Yarn 会从一个全局性的缓存目录中查看请求包是否下载过。如果没有，Yarn 获取 tarball 包并把它放到缓存目录中供下次使用，避免重复下载。\n\n在安装时，Yarn 并发化的操作使得安装过程更加快速。笔者分别用 npm 和 yarn 从零安装了 jsonwebtoken，express 和 lodash，结果当 Yarn 完成安装时，npm 仍在继续。\n\n![still installing](https://cdn.auth0.com/blog/blog/yarn-npm-compare.png)\n\n# 自动锁定软件包版本\n\nNpm 有一个特点叫 shrinkwrap，意在锁定依赖包的版本以便在生产环境使用。shrinkwrap 的问题在于每一个开发者必须手动运行 npm shrinkwrap 以生成 npm-shrinkwrap.json 文件，而这一过程很容易被人们忽略！\n\n对 Yarn 来说，这又是另一种情况。yarn.lock 是在安装过程中自动生成的，就像 PHP 程序员熟悉的 composer.lock 一样。yarn.lock 文件锁定了软件包的版本和所有的依赖包。有了这个文件，就可以确保团队的每一个成员都使用同一个版本的软件包，部署也变得容易，不会有意料之外的错误。\n\n# 安装依赖包在所有机器上都一致\n\nNpm 安装依赖包可以为开发者创建文件结构，但可能程序员 A 的 node_modules 目录跟 B 的不一样。这是因为 Npm 用的一种非决定性的方式安装依赖包。这种安装方式有时就是造成 “在我系统里运行正常” 这一常见问题的原因。\n\nYarn 就没有这个问题。版本锁定文件和安装算法的存在，确保了依赖包安装不管在开发环境还是生产环境，会生成一模一样的文件和文件结构。\n\n还有一点（标题是 5 大功能，但是笔者实在太想分享关于 Yarn 的优点了），企业要求可以列出依赖包许可证的类型。Yarn 很好地满足了这个需求，只需要在文件的根目录下运行 yar licenses 即可得得到依赖包的许可证种类。\n\n同时：Yarn 和 Auth0 的兼容\n\nAuth0 为每一个登录的用户签发一个 JSON Web Token。这意味着系统具有一套可靠的身份识别设施，包括单点登录，用户管理，社交身份认证（Facebook, Github, Tiwtter等等），企业级身份认证（Active Directory，LDAP，SAML等等），以及数据库用户的管理，这些的实现都只需要几行代码。\n\n通过 Lock 组件可以在 Javascript 的程序中很容易地设置认证系统。在终端用 yarn 安装 Auth0 lock 组件仅仅需要一行命令：\n\n```\nyarn add auth0-lock\n```\n\n在 `yark.lock` 的帮助下，lock 组件在几秒之内安装完毕并锁定了版本号。如果还未有 Auth0 账号，笔者建议现在就注册一个。然后在 Auth0 的用户管理主界面，从导航条的选择应用，再选择想要连接到 Javascript 框架的应用。接下来就可以阅读快速上手的文档，根据选择的 app 种类跟随文档的引导即可。\n\n# 结语\n\nYarn 还在起步阶段，但是已经给 Javascript 软件包管理带来了十分显著的改善，特别是在从全局性的 registries 获取包到本地的方式上，对其速度和安全性的改善。Yarn 是否会变成最受 Javascript 程序员欢迎的软件包管理器？你和你的团队是否会用 Yarn？ 对 Yarn 有什么见解？请给我留言！\n",
  },
  {
    title: "Deploy rails app to AWS with Elastic Beanstalk",
    description: "Deploying Rails applications to AWS Elastic Beanstalk",
    date: "2016-10-17T00:00:00.000Z",
    tags: ["ruby", "rails", "devops", "aws", "deployment"],
    image:
      "https://miro.medium.com/v2/resize:fit:1058/1*vqDloHZv9SVFtkr_0e7now.png",
    draft: false,
    slug: "deploy-rails-app-to-aws-with-elastic-beanstalk",
    content:
      "\n## What is AWS Elastic Beanstalk?\nAWS Elastic Beanstalk is a cloud deployment and provisioning service that automates the process of getting applications set up on the Amazon Web Services (AWS) infrastructure. You don't pay for Elastic Beanstalk, **it's free service but you do pay for the resources it created.**\n\n## Get startted\nFirst thing first you need an amason AWS account, simply sign up on [Amazon AWS](https://aws.amazon.com/), it offers free tier for a year when this is written.\n\n## Rails app\nAssuming that you already have a rails app that is ready to be deployed. If not, please follow the commands below to create a sample rails app.\n\n```\n$ rails new blog\n$ cd blog\n$ git init && git add -A && git commit -m \"Add rails scaffold\"\n$ rails generate scaffold post title:string body:text\n$ bundle exec rake db:migrate\n$ git add -A && git commit -am \"Add post resource\"\n```\n\n## Elastic Beanstalk Command Line Tools\nInstall it via Homebrew (or follow [this instruction](http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html#eb_cli3-install-with-pip) for PC)\n```\n$ brew update\n$ brew install aws-elasticbeanstalk\n```\n\n## Initialise the Elastic Beanstalk\nCD into your rails app directory, then initalise the app\n```\ncd blog\neb init\n\nSelect a default region\n3) us-west-2 : US West (Oregon)\nSelect an application to use\n[ Create new Application ]\nEnter Application Name\nblog\nApplication blog has been created.\nIt appears you are using Ruby. Is this correct?\n(y/n): y\nSelect a platform version.\n1) Ruby 2.2 (Puma)\nDo you want to set up SSH for your instances?\n(y/n): n\n```\nNote: you will need setup your AWS key id and secret ID if it's the first you use Elastic Beanstalk Command Line Tools.\n\n## Create a new environment\nRun \n```\neb create blog-env:\n```\nIt may takes a few minutes to execute.\n\nThen set the secret key and any other environment variables\n```\n# for mac user\nrake secret | pbcopy\neb setenv SECRET_KEY_BASE={the secret key in your clipboard}\n```\n\n## DB\n```\n# database.yml\nproduction:\n    <<: *default\n    adapter: postgresql\n    encoding: unicode\n    database: <%= ENV['RDS_DB_NAME'] %>\n    username: <%= ENV['RDS_USERNAME'] %>\n    password: <%= ENV['RDS_PASSWORD'] %>\n    host: <%= ENV['RDS_HOSTNAME'] %>\n    port: <%= ENV['RDS_PORT'] %>\n```\nNote: Please remember to create **db.t2.micro** RDS instance only, it's only free.\n\nPush the changes then do\n```\neb deploy\n```\n\nYou app is now live!\n\n## Rerefence\n1. [How to set up a Rails 4.2 app on AWS with Elastic Beanstalk and PostgreSQL](https://medium.com/@jatescher/how-to-set-up-a-rails-4-2-app-on-aws-with-elastic-beanstalk-and-postgresql-3f9f29c046e2#.fbvysqycv)\n",
  },
  {
    title: "A step to a journey of thousands of miles",
    description: "Reflections on the journey of learning and growth",
    date: "2016-10-05T00:00:00.000Z",
    tags: ["personal", "learning", "experience"],
    image:
      "https://media.istockphoto.com/id/1250921835/photo/ladder-to-success-concept-human-stick-figure-taking-first-step-on-a-red-staircase.jpg?s=612x612&w=0&k=20&c=CD3tlas__5zLST7aLd_jup_IoMWOu5gMMH7Ja5lhGCM=",
    draft: false,
    slug: "a-step-to-a-journey-of-thousands-of-miles",
    content:
      '\n## The initial\nI\'ve been always thinking that a tech post should be a thing that is very profound. It should resolve a crucial programming or software engineer issue. \n\nBut I am so wrong on that. In reality (by now), most of issues that are just normal, requiring to google and or read documentations to figure out. But I still gained lots of pleasures by resovling them. Therefore I start to record the issues that I meet and how I figure it out.\n\n![Imgur](/assets/images/posts/KLgneIo.jpg)\n\n## The first issue\nA few weeks ago I was building a dashboard in Rails. To increase the users\' happniness I implement the avatar upload function by [Paperclips](https://github.com/thoughtbot/paperclip). Parts of the code look like:\n```\nhas_attached_file :avatar,\n    :styles => { medium: "128x128#" },\n    :path => ":rails_root/public/:url",\n    :url  => "/avatars/:id/:style/:filename"\n```\n\nClearly I was hoping to organise the path and url better. The issue was that default_url could be not found as the path is redefined. On production the abominated broken image will be shown.\n\nAfter a few attempts to fix the url and path, but had no luck. The [default_url method](https://github.com/thoughtbot/paperclip/blob/master/lib/paperclip/url_generator.rb#L24-L32) is overall the places.\n\n## My solution\nWhen cannot resolve an issue in a way more than `20~30` mins, I tend to think of it from different ange. The default image is stored in the repository and Rails surely knows where it is. Why don\'t I just write my own "default_url" method? So the final codes are\n\n```\ndef avatar_url\n\tcurrent_user.avatar.present? ? current_user.avatar.url(:medium) : "avatar_missing.png"\nend\n```\n\nProblem solved! :D\n',
  },
  {
    title: "Introducing ReleaseHub",
    description: "Introduction to ReleaseHub - a deployment management tool",
    date: "2016-03-01T00:00:00.000Z",
    tags: ["devops", "deployment", "tools"],
    image:
      "https://opengraph.githubassets.com/89e51ae86d2d21b8569c88442d0e5f98a13c35851fea55b6d0c96c0343bc8aff/JIAZHEN/releasehub",
    draft: false,
    slug: "introducing-releasehub",
    content:
      "\n## Motivation\nWith three scrum teams at Venntro, we are very reasonable to push code mutiple times a day to variety of different environments. In order to get fast and easy deploys, we submit release rquest including github repository name, branch name etc via google form.\n\nHowever, with the google form nothing is handy (in this case). Developers have to manually fill in all fields, copy & paste the github commit SHA (and double check it is the correct). In the meantime, Ops maintain the form every time we add a new repo, and work with google script to save the request in google spreadsheet with no choice.\n\n![Imgur](/assets/images/posts/OujN1RM.jpg)\n\n_Time is money_, hence nspired by [Tim Blair](http://tim.bla.ir/), [Sam Barnes](http://www.thesambarnes.com/) and [shipit](http://shopifyengineering.myshopify.com/blogs/engineering/79963972-introducing-shipit), I implemented ReleaseHub. And after months of improvement and internal use, we're excited to open-source our deployment tool, ReleaseHub. [demo](https://releasehub.herokuapp.com/).\n\n## Time and money saving\nIn my careful comparison test, it takes 55 seconds to complete a release request via the google form while ReleaseHub just needs 20 seconds. Secondly, google form has no way to notify our Ops team that the request is waiting to deploy, it could waste up to 40 minutes in waiting. ReleaseHub can eliminate this risk by integrated Slack notification. \n\nIn general ReleaseHub will save us up to 0.6763 hour (40 mins and 35 seconds), even with the current minimum wage £7 per hour, the potential cost of per release request is about £4.73. \n\nOn avergage we have 280 reqeusts per month, indicates that potentially we could save £1,325.5 monthly if this google form is replaced by a simple app! We are not creating revenues, but, the money we save means we can efficiate our work and the company investment. Overall, I believe it is really a tool that can helps the development team.\n\n![Imgur](/assets/images/posts/uwlSyQ0.png)\n\n\n## Concolusion\nReleaseHub is assuming that the dev team is using github as the source control and slack for internal team communication. Here is the demo link - [ReleaseHub](https://releasehub.herokuapp.com/), the [wiki pages](https://github.com/JIAZHEN/releasehub/wiki), and of course, the [github repository](https://github.com/JIAZHEN/releasehub)\n\nPlease feel free to drop me a line and let me know what you think.\n",
  },
  {
    title: "AbRules - My AB testing gem",
    description: "Creating an A/B testing gem for Ruby applications",
    date: "2015-09-23T00:00:00.000Z",
    tags: ["ruby", "testing", "ab-testing", "tools"],
    image: "https://www.codewars.com/packs/assets/og-image.7f5134fb.png",
    draft: false,
    slug: "abrules-my-ab-testing-gem",
    content:
      '\n# AbRules\nAbRules is a light ruby library to fulfill A/B testing.\n\nInspired by Split, AbRules aims to simplify the A/B testing logic, focus on providing flexible rules to generate different contents.\n\n## Requirements\n- Ruby 1.9.3 or higher\n\n## Setup\n```bash\ngem install ab_rules\n```\n\n## Usage\nExample: A/B testing by ID\n\n```ruby\nrequire "ab_rules"\n\nAbRules.split_by_id(122, "control", "test")  #=> "control"\nAbRules.split_by_id(333, "control", "test")  #=> "test"\n\nAbRules.split_by_id(333, "control", "test") do |alternative|\n  "The version is #{alternative}"\nend\n\n#=> "The version is test"\n```\n\nExample: A/B testing by rules\n\n```ruby\nrequire "ab_rules"\n\nSITES = [123, 567, 999]\nNETWORKS = [1, 4, 6]\n\nrules = [\n  AbRules.rule(:control) do |subjects|\n    subjects[:country] == "uk"\n  end,\n\n  AbRules.rule(:test) do |subjects|\n    subjects[:id] && subjects[:id].even?\n  end,\n\n  AbRules.rule(:default)\n]\n\nAbRules.split_by_rule({ country: "uk" }, rules)  #=> :control\nAbRules.split_by_rule({ id: 2 }, rules)  #=> :test\nAbRules.split_by_rule({}, rules) do |content|\n  "Cotent is #{content}"\nend\n#=> "Cotent is default"\n```\n\n## Questions, Feedback\nFeel free to message me on [Github](github.com/JIAZHEN/) or Twitter [@JIAZHENXIE](https://twitter.com/JIAZHENXIE) :)\n',
  },
  {
    title: "Design pattern in ruby notes",
    description: "Design patterns implementation notes in Ruby",
    date: "2014-11-26T00:00:00.000Z",
    tags: ["ruby", "design", "patterns", "programming"],
    image:
      "https://refactoring.guru/images/patterns/languages/ruby.png?id=f9f66be3c4a30f3e71a330ca61659d4c",
    draft: false,
    slug: "design-pattern-in-ruby-notes",
    content:
      '\n### Template Method pattern\n- Template Method pattern is to build an abstract base class with a skeletal method. Non-abstract methods that can be overridden in the concrete classes of the Template Method pattern are called hook methods. \n- The "I am what I am" approach to typing has been called duck typing\n',
  },
  {
    title: "Setup Ruby on Rails in DigitalOcean",
    description:
      "Complete guide to deploying Ruby on Rails applications on DigitalOcean",
    date: "2014-08-30T00:00:00.000Z",
    tags: ["ruby", "rails", "devops", "deployment"],
    image:
      "https://miro.medium.com/v2/resize:fit:1400/1*zQFXeIUoRXpoS3X1VOd_PQ.png",
    draft: false,
    slug: "setup-ruby-on-rails-in-digitalocean",
    content:
      "\nRecently I moved the site from Heroku to DigitalOcean. As you can imagine, deployment could be difficult. Therefore I'd like to summarise the steps to deploy to DigitalOcean.\n\n## Create a droplet with one-click Ruby on Rails Application\nFirst of all, you need to create a droplet in DigitalOcean.\n\n## Install git\nSSH to the server then run\n```\nsudo apt-get install git-core\n```\n\n## Configurate codebase\n```\ngit clone <repo_https>\nchmod 755 rails\nchown -R rails:www-data <repo>\n```\n\n## Deploy\n1. Configure the database to point to the database\n2. Install gems `bundle install --deployment`\n3. Add any environmental variables to `/etc/default/unicorn`\n4. Restart the server `service unicorn restart`\n5. Allow remote access to the DB\n\n      ```\n      sudo nano /etc/mysql/my.cnf\n      bind-address = your_database_IP\n      GRANT ALL PRIVILEGES ON db.* To 'user'@'%' IDENTIFIED BY 'password';\n      FLUSH PRIVILEGES;\n      ```\n",
  },
  {
    title: "QA Automation at Global Personals (Venntro Media Group)",
    description: "Implementing QA automation at Global Personals",
    date: "2014-06-08T00:00:00.000Z",
    tags: ["testing", "qa", "automation", "experience"],
    image:
      "https://media.licdn.com/dms/image/C4D0BAQFX5kOYM92d-A/company-logo_200_200/0/1594215316549?e=2147483647&v=beta&t=lH5uMUO_KEuQS3zkniYYdc96gHXxVyn4hxrwGqjGpSI",
    draft: false,
    slug: "qa-automation-at-global-personals",
    content:
      "\nI joined Global Personals as a Developer in Test in September 2013. Global had successfully started an automation testing programme for a year before I joined. During the last eleven months, we've made quite a lot of further improvements to our framework as well as massively increasing our test library. So here I would like to review what we have achieved and what I have learnt about automation.\n\n## Framework\nWe use Ruby to develop the automation scripts, just like many of our applications. Therefore we use RSpec as the test framework, plus Capybara and Selenium for all the web application tests.\n\n### Page Object\nPreviously to reduce the duplicated code, we had created common helpers. However, after a few months more helpers were added, it caused problems that we had no idea where to find or add our helpers. After some research and discussion we decided to use The Page Object pattern to build our own DSL (domain specific language). The idea is to encapsulate the page's behaviours into the page object, which is good for maintaining automation scripts and increasing code readability. Below is an example of the login page object\n\n```\nclass LoginPage\n  def login_as(member)\n    fill_in :memberid, with: member.email\n    fill_in :password, with: member.password\n    find(\"button[type='submit']\").click\n  end\nend\n```\n\nCalling `login_page.login_as` in the automation scripts can log the member in and is easy and readable. It gives a clear code structure where the helpers can be found and added. Another benefit is we can now guess the methods in automation. If you would like to perform a payment with automation, try to search `payment_page`.\n\n## Continuous Integration\nAs part of BDD (Behaviour Driven Development), the end-to-end automation scripts are able to guarantee the correct behaviours of our applications, no matter what changes are made in the application. With our success in writing automation scripts, naturally we moved forward to CI. By building our CI system with [Jenkins](http://jenkins-ci.org/), we can successfully run automation scripts against different environments and branches. The CI results are output in HTML on the server and can be posted to our team communication application, [Slack](https://slack.com/).\n\nBut that's not enough yet. As good testers we'd like to provide the steps to replicate the issue and the clear result of the failure, so we added the ability for automation to take screenshots when an example is failing, and attach them to the HTML. People without any knowledge of the QA Automation application can read the CI results and do not need to imagine what they look like.\n\n![image](http://i749.photobucket.com/albums/xx136/fdf515/screenshot_zpscc2cf6d8.png)\n\nSo far we've managed to run 100+ end-to-end tests within an hour in our CI system (it's all running in one virtual machine, amazing!), and it's proven that CI is able to capture bugs in our day-to-day work.\n\n## Stability\nSince most of our automation scripts are End-to-End tests and our product has a lot of user interfaces, there are lots of web UI tests in the test suite. As a result, we experiences many intermittent issues like request timeout, page is not completely loaded, server is down etc. These reduce the confidence of our automation tests. Therefore, we need some techniques to help the driver to deal with them in order to increase the tests' stability.\n\nTo handle a timeout or element not found error, waiting is a good solution. There are two types of wait, implicit wait and explicit wait.\n\n#### Implicit Wait\nSimply using `Capybara.default_wait_time` will change the capybara implicit wait time. Capybara is smart enough to retry finding the link for a brief period of time before giving up and throwing an error. However, changing the global default wait time means automation is slowed down. Thankfully Capybara allows us to temporarily change the time by using `Capybara.using_wait_time(5) {}`.\n\n#### Explicit Wait\nAs the name suggests, we tell Capybara to sleep until the element is there. The code is written similarly to `sleep 1 until page.has_css?('#targetElementID')`. This is better than implicit wait as we don't have to wait up to the default wait time when we expect not to have the content on the page. But we also need to be careful with this wait. As if the server is down, the automation will continue in an infinite loop, so we should add `Timeout::timeout(5) {}` to the loop.\n\n## Speed Up\nLast but not least, the speed of automation. In the agile process, we'll need to add more end-to-end tests to CI as a result of new features required. But we don't want to slow down the CI as in theory, a CI run should finish in an hour as it's for agile testing. We don't have unlimited budget to have thousands of VMs. Therefore we need some tools and techniques to speed it up.\n\nThe first idea is to use a headless driver. Selenium is good while developing automation so you can watch it. CI doesn't really need to open a browser. We chose [poltergeist](https://github.com/teampoltergeist/poltergeist) as the headless driver, it doesn't load the entire browser and can simulate the user activities. \n\nParallel tests is another technique to speed automation up. We are using the parallel gem in the automation, it increases the overall automation speed by 20%. For instance, one of our automation scripts used to take 912 seconds without parallel, with parallel it takes only 341 seconds.\n\nThe automation run without parallel:\n![image](http://i749.photobucket.com/albums/xx136/fdf515/automation-without-parallel_zps7c70b92d.png)\n\nThe automation run with parallel:\n![image](http://i749.photobucket.com/albums/xx136/fdf515/automation-parallel_zpsc47c5ce3.png)\n\n\n## Repeat Tests\nBecause we are developing with selenium driver, it's possible that some cases do not work with the poltergeist driver. In order to get the balance of speed and accuracy, we built a repeat mechanism in our automation. The automation scripts are executed concurrently with poltergeist driver, the failing examples are recorded in `rspec.failures` file (if any), then CI will use selenium to re-run just those failing examples.\n\n## Summary\nHere at Global Personals we've made great progress in test automation, it speeds up regression testing while not reducing the test confidence level, really helping software development in an agile environment. Of course there is still lots of work that can be done in automation, for example, catch the JavaScript errors on the page then send the whole error stack to the developers. We will never stop improving the automation because it's really enjoyable and helpful!\n",
  },
  {
    title: "How to make automation more stable",
    description:
      "Strategies for creating more stable and reliable test automation",
    date: "2014-05-13T00:00:00.000Z",
    tags: ["testing", "automation", "qa", "best-practices"],
    image: "https://www.zibtek.com/blog/content/images/2020/03/image-14.png",
    draft: false,
    slug: "how-to-make-automation-more-stable",
    content:
      '\nTimeout, page is not completely loaded yet .. This is a really big issue in automation test. Therefore, we will need some techniques to help driver to deal with it. So we will be able to increase the tests stability.\n\n#### Use headless driver - poltergeist\n1. Add `poltergeist` to gemfile\n2. Do `brew install phantomjs` in terminal (assume that using mac ox)\n3. Add the following to spec_helper (resolve `Poltergeist detected another element with CSS selector`)\n\n    ```\n    require \'capybara/poltergeist\'\n\n    Capybara.register_driver :poltergeist do |app|\n      options = { :js_errors => false, :timeout => 30, :window_size => [1920, 1080] }\n      Capybara::Poltergeist::Driver.new(app, options)\n    end\n\n    Capybara.configure do |config|\n      config.run_server = false\n      config.default_driver = :poltergeist\n      config.javascript_driver = :poltergeist\n    end\n    ```\n\n#### Selectors\n1. Capybara is using CSS by default\n2. Use xpath find(:xpath, \'//ul/li\').text\n3. In XPath the expression, // means "anywhere in the document" not "anywhere in the current context"\n\n#### Wait\n- Implicit Wait\n\n    ```\n    driver = Selenium::WebDriver.for :firefox\n    driver.manage.timeouts.implicit_wait = 10 # seconds\n    driver.get "http://somedomain/url_that_delays_loading"\n    element = driver.find_element(:id => "some-dynamic-element")\n    \n    or for capybara\n    config.default_wait_time = 30\n   ```\n- JS document state `document.readyState == "complete"`\n- Explicit Wait plus ExpectedConditions\n\n    ```\n    wait = Selenium::WebDriver::Wait.new(:timeout => 3)\n    wait.until { driver.find_element(:id => "cheese").displayed? }\n    ```\n\n#### Capybara visit\nOccasionally I got timeout from Capybara.visit method. Someone suggested to use gem \'thin\' or bundle update\n\nhttp://stackoverflow.com/questions/12922029/usr-lib-ruby-1-9-1-net-protocol-rb146in-rescue-in-rbuf-fill-timeouterror\n\ncapybara visit timeout\n\nhttp://shashikantjagtap.net/cucumber-capybara-poltergeist-rockstar-bdd-combo/\n\nWhen visit timeout, retry in the method, catch the error. Or, detect if the page has header, retry if not\n\nWhen it\'s complaining element can\'t find but it\'s there when do it manually, consider it hasn\'t visited the URL properly.\n',
  },
  {
    title: "Devise (authentication) with Rails 4",
    description: "Implementing authentication with Devise in Rails 4",
    date: "2014-04-21T00:00:00.000Z",
    tags: ["ruby", "rails", "authentication", "security"],
    image:
      "https://miro.medium.com/v2/resize:fit:300/1*dsK3Tnu8MZZcFKEKgz0QCg.png",
    draft: false,
    slug: "devise-authentication-with-rails-4",
    content:
      "\nAs a Ruby developer, I always want to improve my skills and keep up the pace of the technical trend. Recently I've updated this site to use Ruby 2.0 and Rails 4 (I will write another blog for the upgrade). A couple days ago I started thinking it's the time to use `proper` authentication system for this site. \n\n#### Situation\nMy current authentication system was created from scratch, which I learned from [Michael Hartl](https://www.railstutorial.org/book). It's nice, help to understand the system as for the beginner (alternatively [Zane's RoR resources](http://www.whoishostingthis.com/resources/ruby-on-rails/)). However, it's not nice for experienced rubyist, when we require agile development.\n\nAfter a few researches from [Ruby Toolbox](https://www.ruby-toolbox.com/categories/rails_authentication), I decided to use devise as it's the famous authentication system.\n\n#### Process\nHere is the gem [devise](https://github.com/plataformatec/devise). I'm not gonna to repeat the *Getting started* section in their README, below will focus on my *own* experiences.\n\n#### Initial\n- Installing the gem is easy, just add `gem 'devise'` to Gemfile. \n- Then user rails generator to initialise devise modules. Run `rails generate devise:install`\n- According to the guide information, would need to add `config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }` to the `config/environments/development.rb`\n\n#### Rebuild the database\nAs I said before, we already have user model, users controller and sessions controller. To avoid conflict, I destroyed them before moving on. So I did\n\n```\nrails destroy model user\nrails destroy controller users\nrails destroy controller sessions\n```\n\nThe codes should be clean now. To rebuild the database do\n\n```\nrake db:drop\nrake db:create\nrake db:migrate\n```\n\n*Make sure have the backup of database*\n\n#### Create devise\nOK, good to setup devise. Do `rails generate devise user`.  Then do `rake db:migrate`. Next.. Yes, we have devise setup! Visit localhost:3000/users/sign_up and should be able to create users.\n\nif you have warning like `can't mass-assign protected attributes`, it's strong parameters error. In my case, I need to remove the `protected_attributes` gem!\n\n#### Customise devise\nWe now have devise for our authentication. But the routes do not look nice. As the famous gem, devise provides all the custom configurations. We edit the `config/routes.rb`, replace `devise_for :users` by\n\n```\ndevise_for :users, path: '', \n     path_names: { sign_in: \"signin\", sign_out: \"signout\", sign_up: \"signup\" }, \n     only: :sessions\n```\n\nWe now can use localhost:3000/signin for logging in.\n\nThe views do not look good. Therefore to customise it, we do `rails g devise:views users -v sessions`. Just for login. Don't forget the edit `config.scoped_views = true` in `config/initializers/devise.rb` so that it uses the custom views.\n\n#### BDD\nAfter finishing these, please update the BDD tests. As a ruby developer, we always want to have tests cover the features.\n\n#### Conclusion.\nDevise is strong and easy to use gem, allowing developer to implement the authentication system in short time. This is also why I love ruby, rails ;-)\n",
  },
  {
    title: "Eloquent Ruby Note",
    description: "Notes and insights from Eloquent Ruby book",
    date: "2014-03-23T00:00:00.000Z",
    tags: ["ruby", "programming", "learning"],
    image:
      "https://gumtreeau-res.cloudinary.com/image/private/t_$_58/gumtree/db4d7c02-5bb2-4295-a284-3a3eee70dbf5.jpg",
    draft: false,
    slug: "eloquent-ruby-note",
    content:
      '\nNotes\n=====\n\n- Use Hash if would like to search\n- Cancel the new line\n\n    ```\n    yet_another = %Q{another multi-line string with \n    no newline}\n    ```\n\n- kind_of?, which will return true if the object is an instance of DocumentIdentifier or a subclass of DocumentIdentifier\n- include module, inject a super class to the object\n- When you tack a block onto the end of a method call, Ruby will package up the block as sort of a secret argument and (behind the scenes) passes this secret argument to the method. Inside the method you can detect whether your caller has actually passed in a block with the block_given? method and fire off the block (if there is one) with yield\n\n    ```\n    def each_word\n      words.each { |word| yield( word ) }\n    end\n    ```\n\n- Enumerable also contributes the `each_cons` method to your class. The `each_cons` method takes an integer and a block, and will repeatedly call the block, each time passing in an array of consecutive elements from the collection.\n\n- Benefits for block: execute around\n\n    ```\n    def with_logging(description)\n      begin\n        @logger.debug( "Starting #{description}" )\n        yield\n        @logger.debug( "Completed #{description}" )\n      rescue\n        @logger.error( "#{description} failed!!")\n        raise\n      end\n    end \n    ```\n\n- Code blocks drag along the scope in which they were created wherever they go. In the last example, this means that @doc object is automatically visible inside the code block?no need to pass it down as an argument.\n\n- Proc vs. Lambda\n  1. Proc.new object is very forgiving of the number of arguments passed to its call method.\n  2. a Proc.new block executes an explicit return, Ruby will try to return not just from the block but from the method that created the block. While a return from a lambda wrapped block will simply return from the block and no further\n\n- inherited, will get called just after each subclass is define\n\n    ```\n    def self.included( host_class )\n      host_class.extend( ClassMethods )\n    end\n    ```\n\n- at_exit is last in / first out\n- $! is a global variable that Ruby sets to the last exception raised\n- If you have many different ways that you might create an object, a set of wellnamed class methods is generally clearer than making the user supply all sorts of clever arguments to the new method\n- Including modules into the singleton class is a common enough task that Ruby has a\nspecial shortcut for it in the form of extend\n\n    ```\n    class Document\n      extend Finders\n      # Most of the class omitted...\n    end\n    ```\n\n- Execute around with a block. All of the variables that are visible just before the opening do or `{` are still visible inside the code block.\n- A good rule of thumb is that the only arguments you should pass from the application into an execute around method are those that the execute around method itself, not the block.\n- Compose methods\n\n    ```\n    class TextCompressor\n      attr_reader :unique, :index\n      def initialize( text )\n        @unique = []\n        @index = []\n        add_text( text )\n      end\n\n      def add_text( text )\n        words = text.split\n        words.each { |word| add_word( word ) }\n      end\n\n      def add_word( word )\n        i = unique_index_of( word ) || add_unique_word( word )\n        @index << i\n      end\n\n      def unique_index_of( word )\n        @unique.index(word)\n      end\n\n      def add_unique_word( word )\n        @unique << word\n        unique.size - 1\n      end\n    end\n    ```\n\n  + First, each method should do a single thing.\n  + Each method needs to operate at a single conceptual level: Simply put, don’t mix high-level logic with the nitty-gritty details.\n  + Finally, each method needs to have a name that reflects its purpose.\n  \n- `alias_method` actually copies a method implementation, giving it a new name along the way.\n\n    ```\n    class String\n      alias_method :old_addition, :+\n      def +( other )\n        if other.kind_of? Document\n          new_content = self + other.content\n          return Document.new(other.title, other.author, new_content)\n        end\n        old_addition(other)\n      end\n    end\n    ```\n- `__FILE__` is supplied via the magic of Ruby and is always set to the path of the source file of the current class\n- the `class_eval` method takes a string and evaluates it as if it were code that\nappeared in the class body\n- Pass `instance_eval` a block and, just like call, it will execute the block. The difference is that instance_eval changes the value of self as it executes the block. `self` is the receiver of the block\n',
  },
  {
    title: "Codewar Notes",
    description: "Notes and solutions from CodeWars programming challenges",
    date: "2013-12-07T00:00:00.000Z",
    tags: ["programming", "learning", "algorithms"],
    image: "https://www.codewars.com/packs/assets/og-image.7f5134fb.png",
    draft: false,
    slug: "codewar-notes",
    content:
      "\n- sorts an array of hashes passed in by the hash key specified\n    \n    ```\n    array.sort_by { |h| h[key] }\n    ```\n\n- takes an array of keys and a default value and returns a hash with all keys set to the default value\n    \n    ```\n    Hash[keys.map { |key| [key, default_value] }]\n    ```\n\n- sorts the passed in array of numbers. If the function passes in an empty array or null/nil value then it should return an empty array\n    \n    ```\n    Array(nums).sort\n    ```\n\n- return true if all elements in the array meet conditions\n    \n    ```\n    data.select { |row| row[:sex] == sex }.all? { |row| row[:age] > age }\n    ```\n\n- count the number of 1s in a string\n    \n    ```\n    n.to_s(2).count \"1\"\n    ```\n\n- contain all\n\n    ```\n    class Array\n      def contains_all?(other_array)\n        (other_array - self).size == 0\n      end\n    end\n    ```\n\n- Matrix Addtion\n\n    ```\n    def matrixAddition(a, b)\n      a.zip(b).map{|x,y| x.zip(y).map{|w,z| w+z}}\n    end\n    ```\n\n- block\n\n    Extend the Array class so that it supports an \"invoke\" instance method. The method will be called when someone wishes to execute/invoke a method on each of the items in the array.\n\n    For example, if you wanted to call the \"update\" method with two arguments on all non-nil objects within an array called \"items\":\n\n    ```\n    # contrived class example used to provide a method that we could call\n    class ExampleItem\n      # notice that this method always returns \"updated\"\n      def update(arg1, arg2)\n        @arg1 = arg1\n        @arg2 = arg2\n        \"updated\"\n       end\n    end\n    items = [ExampleItem.new, nil, ExampleItem.new]\n\n    update_results = items.invoke(:update, \"argument 1\", \"argument 2\") {|item| item != nil}\n    # update_result would == ['updated', 'updated']\n    ```\n\n    solution\n\n    ```\n    class Array\n      def invoke(name, *args, &block)\n        self.select(&block).map { |e| e.send(name.to_sym, *args)}\n      end\n    end\n    ```\n\n- Email Regex\n\n    ```\n    email_regex = /A[w+-.]+@[a-zd-.]+.[a-z]+z/i\n    !!(email =~ email_regex)\n    ```\n    - Split uppercase\n    ```\n    s.split /(?=[A-Z])/\n    ```\n\n- Uncapitalize\n\n    ```\n    class String\n      def uncapitalize \n        self[0, 1].downcase + self[1..-1]\n      end\n    end\n\n    str.split(/-|_/) - split by '-' or '_'\n    ```\n- Fluent Calculator\n\n    ```\n      class Calc\n        ACCEPTED_METHODS = { \n          one:'1', two:'2',   three:'3',  four:'4', five:'5',\n          six:'6', seven:'7', eight:'8',  nine:'9', ten:'10',\n          plus:'+', minus:'-', times:'*', divided_by:'/'\n        }\n        \n        def method_missing(name)\n          @calc_string = \"#{@calc_string} #{ACCEPTED_METHODS[name]}\".strip\n          @calc_string.split.size == 3 ? eval(@calc_string) : self\n        end\n      end\n    ```\n- Hash#fetch\n  * `fetch(key_name)`: get the value if the key exists, raise a KeyError if it doesn't\n  * `fetch(key_name, default_value)`: get the value if the key exists, return default_value otherwise\n  * `fetch(key_name) { |key| \"default\" }`: get the value if the key exists, otherwise run the supplied \n\n- Array#pack, Array#unpack\n\n    ```\n    module Converter\n      def self.to_ascii(hex)\n        [hex].pack(\"H*\")\n      end\n\n      def self.to_hex(ascii)\n        ascii.unpack(\"H*\").first\n      end\n    end\n    ```\n- Overlape scan\n\n    ```\n    def search_substr( fullText, searchText, allowOverlap = true )\n      if searchText == ''\n        0\n      else\n        fullText.scan(allowOverlap ? Regexp.new(\"(?=(#{searchText}))\") : searchText).size\n      end\n    end\n    ```\n",
  },
  {
    title: "Continuous Integration",
    description: "Setting up and maintaining continuous integration",
    date: "2013-12-01T00:00:00.000Z",
    tags: ["devops", "ci-cd", "best-practices"],
    image:
      "https://www.lambdatest.com/blog/wp-content/uploads/2022/07/image27-3-1.png",
    draft: false,
    slug: "continuous-integration",
    content:
      "\n- Use [Jenkins](http://jenkins-ci.org/)\n- Automatically pull repo, execute the specs\n- Use [watir](http://watir.com/)\n- Use [headless browser](https://github.com/thoughtbot/capybara-webkit)\n- Use [Bamboo - CI build tool](https://www.atlassian.com/software/bamboo)\n- CI Tool: TeamCity, Jenkins \n- Build Tool: Ant, Maven, Gradle\n",
  },
  {
    title: "To initialise a Ruby on Rails app",
    description:
      "Step-by-step guide to setting up a new Ruby on Rails application",
    date: "2013-11-17T00:00:00.000Z",
    tags: ["ruby", "rails", "tutorial"],
    image:
      "https://res.cloudinary.com/practicaldev/image/fetch/s--jvDLhx0b--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/cpcr5w0kgl6j94tss7n9.png",
    draft: false,
    slug: "to-initialise-a-ruby-on-rails-app",
    content:
      "\nToday I'm going to summarise how to initialise a RoR. Many thanks to \n> Ruby on Rails Tutorial Learn Web Development with Rails by Michael Hartl\n\nHere we are using `ruby 2.0` and `rails 4.0.0`\n\n## Create RoR app\nFirstly we create a new app\n```\nrails new sample_app --skip-test-unit\n```\n\n## Working with git\nWe would use github to manager our code. Create a new repository in github without README. Then do\n\n```\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin git@github.com:USERNAME/APP_NAME.git\ngit push -u origin master\n``` \n\n## Update Gemfile\n```\nsource 'https://rubygems.org'\nruby '2.0.0'\n#ruby-gemset=railstutorial_rails_4_0\n\ngem 'sass-rails', '4.0.1'\ngem 'bootstrap-sass', '2.3.2.2'\ngem 'uglifier', '2.1.1'\ngem 'coffee-rails', '4.0.1'\ngem 'jquery-rails', '3.0.4'\ngem 'turbolinks', '1.1.1'\ngem 'jbuilder', '1.0.2'\ngem 'haml', '~> 4.0.4'\ngem 'will_paginate'\ngem 'bootstrap-will_paginate', '~> 0.0.10'\ngem 'friendly_id', '~> 5.0.0'\ngem 'rails', '4.0.0'\n\ngroup :development, :test do\n  gem 'faker', '~> 1.2.0'\n  gem 'rspec-rails', '2.13.1'\nend\n\ngroup :development do\n  gem 'pg', '0.15.1'\nend\n\ngroup :test do\n  gem 'selenium-webdriver', '2.35.1'\n  gem 'capybara', '2.1.0'\n  gem 'sqlite3', '1.3.8'\nend\n\ngroup :doc do\n  gem 'sdoc', '0.3.20', require: false\nend\n\ngroup :production do\n  gem 'pg', '0.15.1'\n  gem 'rails_12factor', '0.0.2'\nend\n```\n\n## Update secret token\nEdit `config/initializers/secret_token.rb`\n\n```\nrequire 'securerandom'\n\ndef secure_token\n  token_file = Rails.root.join('.secret')\n  if File.exist?(token_file)\n    # Use the existing token.\n    File.read(token_file).chomp\n  else\n    # Generate a new token and store it in token_file.\n    token = SecureRandom.hex(64)\n    File.write(token_file, token)\n    token\n  end\nend\n\nSampleApp::Application.config.secret_key_base = secure_token\n```\n\n## Config the app\nEdit `config/application.rb`\n\n```\nconfig.assets.precompile += %w(*.png *.jpg *.jpeg *.gif)\nconfig.action_view.field_error_proc = Proc.new { |html_tag, instance| \n  \"#{html_tag}\".html_safe \n}\n```\n\n## Initialise Rspec\n```\nrails generate rspec:install\n```\n\n## Deploy to heroku\n```\nheroku create\nrake assets:precompile\ngit add .\ngit commit -m \"Add precompiled assets for Heroku\"\ngit push heroku master\nheroku rename XXXX\n```\n\nThen, we are done, wow~\n",
  },
  {
    title: "Friendly URL",
    description: "Implementing SEO-friendly URLs in web applications",
    date: "2013-11-07T00:00:00.000Z",
    tags: ["web", "seo", "rails", "ruby"],
    image:
      "https://cdn.tutsplus.com/cdn-cgi/image/width=600/webdesign/uploads/legacy/tuts/413_SEO_friendlyurls/seo-url.jpg",
    draft: false,
    slug: "friendly-url",
    content:
      '\nThis is a great article [Friendly URLs](https://gist.github.com/cdmwebs/1209732). So that I repost here.\n\n## \n\nBy default, Rails applications build URLs based on the primary key -- the `id` column from the database. Imagine we have a `Person` model and associated controller. We have a person record for `Bob Martin` that has `id` number `6`. The URL for his show page would be:\n\n```\n/people/6\n```\n\nBut, for aesthetic or SEO purposes, we want Bob\'s name in the URL. The last segment, the `6` here, is called the "slug". Let\'s look at a few ways to implement better slugs.\n\n## Simple Approach\n\nThe simplest approach is to override the `to_param` method in the `Person` model. Whenever we call a route helper like this:\n\n```\nperson_path(@person)\n```\n\nRails will call `to_param` to convert the object to a slug for the URL. If your model does not define this method then it will use the implementation in `ActiveRecord::Base` which just returns the `id`.\n\nFor this method to succeed, it\'s critical that all links use the `ActiveRecord` object rather than calling `id`. *Don\'t ever do this*:\n\n```\nperson_path(@person.id) # Bad!\n```\n\nInstead, always pass the object:\n\n```\nperson_path(@person)\n```\n\n### Slug Generation\n\nInstead, in the model, we can override `to_param` to include a parameterized version of the person\'s name:\n\n```\nclass Person < ActiveRecord::Base\n  def to_param\n    [id, name.parameterize].join("-")\n  end\nend\n```\n\nFor our user `Bob Martin` with `id` number `6`, this will generate a slug `6-bob_martin`. The full URL would be:\n\n```\n/people/6-bob-martin\n```\n\nThe `parameterize` method from `ActiveSupport` will deal with converting any characters that aren\'t valid for a URL.\n\n### Object Lookup\n\nWhat do we need to change about our finders? Nothing! When we call `Person.find(x)`, the parameter `x` is converted to an integer to perform the SQL lookup. Check out how `to_i` deals with strings which have a mix of letters and numbers:\n\n```\n> "1".to_i\n# => 1 \n> "1-with-words".to_i\n# => 1 \n> "1-2345".to_i\n# => 1 \n> "6-bob-martin".to_i\n# => 6 \n```\n\nThe `to_i` method will stop interpreting the string as soon as it hits a non-digit. Since our implementation of `to_param` always has the `id` at the front followed by a hyphen, it will always do lookups based on just the `id` and discard the rest of the slug.\n\n### Benefits / Limitations\n\nWe\'ve added content to the slug which will improve SEO and make our URLs more readable.\n\nOne limitation is that the users cannot manipulate the URL in any meaningful way. Knowing the url `6-bob-martin` doesn\'t allow you to guess the url `7-russ-olsen`, you still need to know the ID.\n\nAnd the numeric ID is still in the URL. If this is something you want to obfuscate, then the simple scheme doesn\'t help.\n\n## Using a Non-ID Field\n\nSometimes you want to get away from the ID all together and use another attribute in the database for lookup. Imagine we have a `Tag` object that has a `name` column. The name would be something like `ruby` or `rails`.\n\n### Link Generation\n\nCreating links can again override `to_param`:\n\n```\nclass Tag < ActiveRecord::Base\n  validates_uniqueness_of :name\n  \n  def to_param\n    name\n  end\nend\n```\n\nNow when we call `tag_path(@tag)` we\'d get a URL like `/tags/ruby`.\n\n### Object Lookup\n\nThe lookup is harder, though. When a request comes in to `/tags/ruby` the `ruby` will be stored in `params[:id]`. A typical controller will call `Tag.find(params[:id])`, essentially `Tag.find("ruby")`, and it will fail.\n\n#### Option 1: Query Name from Controller\n\nInstead, we can modify the controller to `Tag.find_by_name(params[:id])`. It will *work*, but it\'s bad object-oriented design. We\'re breaking the encapsulation of the `Tag` class. \n\nThe *DRY Principle* says that a piece of knowledge should have a single representation in a system. In this implementation of tags, the idea of "A tag can be found by its name" has now been represented in the `to_param` of the model *and* the controller lookup. That\'s a maintenance headache.\n\n#### Option 2: Custom Finder\n\nIn our model we could define a custom finder:\n\n```\nclass Tag < ActiveRecord::Base\n  validates_uniqueness_of :name\n  \n  def to_param\n    name\n  end\n  \n  def self.find_by_param(input)\n    find_by_name(input)\n  end\nend\n```\n\nThen in the controller call `Tag.find_by_param(params[:id])`. This layer of abstraction means that only the model knows exactly how a `Tag` is converted to and from a parameter. The encapsulation is restored.\n\nBut we have to remember to use `Tag.find_by_param` instead of `Tag.find` everywhere. Especially if you\'re retrofitting the friendly ID onto an existing system, this can be a significant effort.\n\n#### Option 3: Overriding Find\n\nInstead of implementing the custom finder, we could override the `find` method:\n\n```\nclass Tag < ActiveRecord::Base\n  #...\n  def self.find(input)\n    find_by_name(input)\n  end\nend\n```\n\nIt will work when you pass in a name slug, but will break when a numeric ID is passed in. How could we handle both?\n\nThe first temptation is to do some type switching:\n\n```\nclass Tag < ActiveRecord::Base\n  #...\n  def self.find(input)\n    if input.is_a?(Integer)\n      super\n    else\n      find_by_name(input)\n    end\n  end\nend\n```\n\nThat\'ll work, but checking type is very against the Ruby ethos. Writing `is_a?` should always make you ask "Is there a better way?"\n\nYes, based on these facts:\n\n* Databases give the `id` of `1` to the first record\n* Ruby converts strings starting with a letter to `0`\n\n```\nclass Tag < ActiveRecord::Base\n  #...\n  def self.find(input)\n    if input.to_i != 0\n      super\n    else\n      find_by_name(input)\n    end\n  end\nend\n```\n\nOr, condensed down with a ternary:\n\n```\nclass Tag < ActiveRecord::Base\n  #...\n  def self.find(input)\n    input.to_i == 0 ? find_by_name(input) : super\n  end\nend\n```\n\nOur goal is achieved, but we\'ve introduced a possible bug: if a name starts with a digit it will look like an ID. If it\'s acceptable to our business domain, we can add a validation that names cannot start with a digit:\n\n```\nclass Tag < ActiveRecord::Base\n  #...\n  validates_format_of :name, :without => /^d/\n  def self.find(input)\n    input.to_i == 0 ? find_by_name(input) : super\n  end\nend\n```\n\nNow everything should work great!\n\n## Using the FriendlyID Gem\n\nDoes implementing two additional methods seem like a pain? Or, more seriously, are you going to implement this kind of functionality in multiple models of your application? Then it might be worth checking out the FriendlyID gem: https://github.com/norman/friendly_id\n\n### Setup\n\nThe gem is just about to hit a 4.0 version. As of this writing, you want to use the beta. In your `Gemfile`:\n\n```\ngem "friendly_id", "~> 4.0.0.beta8"\n```\n\nThen run `bundle` from the command line.\n\n#### Simple Usage\n\nThe minimum configuration in your model is:\n\n```\nclass Tag < ActiveRecord::Base\n  extend FriendlyId\n  friendly_id :name\nend\n```\n\nThis will allow you to use the `name` column or the `id` for lookups using `find`, just like we did before.\n \n#### Dedicated Slug\n\nBut the library does a great job of maintaining a dedicated slug column for you. If we were dealing with articles, for instance, we don\'t want to generate the slug over and over. More importantly, we\'ll want to store the slug in the database to be queried directly.\n\nThe library defaults to a `String` column named `slug`. If you have that column, you can use the `:slugged` option to automatically generate and store the slug:\n\n```\nclass Tag < ActiveRecord::Base\n  extend FriendlyId\n  friendly_id :name, :use => :slugged\nend\n```\n\n### Usage\n\nYou can see it in action here:\n\n```\n> t = Tag.create(:name => "Ruby on Rails")\n# => #<Tag id: 16, name: "Ruby on Rails", created_at: "2011-09-11 15:42:53", updated_at: "2011-09-11 15:42:53", slug: "ruby-on-rails"> \n> Tag.find 16\n# => #<Tag id: 16, name: "Ruby on Rails", created_at: "2011-09-11 15:42:53", updated_at: "2011-09-11 15:42:53", slug: "ruby-on-rails"> \n> Tag.find "ruby-on-rails"\n# => #<Tag id: 16, name: "Ruby on Rails", created_at: "2011-09-11 15:42:53", updated_at: "2011-09-11 15:42:53", slug: "ruby-on-rails"> \n> t.to_param\n# => "ruby-on-rails" \n```\n\nWe can use `.find` with an ID or the slug transparently. When the object is converted to a parameter for links, we\'ll get the slug with no ID number. We get good encapsulation, easy usage, improved SEO and easy to read URLs.\n\nIf you\'re adding FriendlyId to an existing app and need to generate slugs for existing users, do this from the console, runner, or add a Rake task `User.find_each(&:save)`\n',
  },
  {
    title: "Ruby equality",
    description:
      "Understanding Ruby's equality operators and object comparison",
    date: "2013-11-03T00:00:00.000Z",
    tags: ["ruby", "programming"],
    image:
      "https://cdn.shopify.com/s/files/1/0779/4361/articles/ShopifyEng_BlogIllustrations_220411_72ppi_01_ImplementingEqualityInRuby.jpg?v=1653388463",
    draft: false,
    slug: "ruby-equality",
    content:
      '\nThe Object class defines three methods related to equality ? `==`, `eql?` and `equals?`.\n\n#### ==, eql?\nBoth == and eql? implement value equality checks ? they are not interested in whether two variables point to the same object in memory, but whether two objects are equal in terms of their values.\n\n#### equal?\nIt implements what?s commonly known as reference equality check. The method returns true only if its receiver (the object upon the method was invoked) and parameter (the object we?re comparing to) are the same object (Java developers should think of the `==` operator there).\n\n```\nsome_word = "word"\nsome_other_word = some_word\n\nsome_word.equal? some_other_word # true\n```\n',
  },
  {
    title: "Ruby - define_method, method_missing, and instance_eval",
    description: "Deep dive into Ruby's metaprogramming features",
    date: "2013-11-02T00:00:00.000Z",
    tags: ["ruby", "metaprogramming", "advanced"],
    image:
      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTeQ1AckHtZUybCtVvIVeT_cCUqIPYjuagUsQ&usqp=CAU",
    draft: false,
    slug: "ruby-define_method-method_missing-and-instance_eval",
    content:
      '\nRuby\'s define_method, method_missing, and instance_eval are always mysterious to new starter. I put effort to understand what exactly they are. Here are the notes of what I\'ve got.\n\n#### Define_method\n`define_method` lets you create methods using a method rather than the language builtin `def`. One major benefit of this is that you can reduce the duplication inherent methods with similar definitions. For example, the following methods all pull data out of an internal hash:\n\n```\n# Without define_method:\ndef user;  @data[:user];  end\ndef email; @data[:email]; end\ndef food;  @data[:food];  end\n```\n\nWith `define_method`, we can iterate over each method name and reduce the duplication like so:\n\n```\n# With define_method:\n%w(user email food).each do |meth|\n  define_method(meth) { @data[meth.to_sym] }\nend\n```\n\nVery easy to maintain.\n\n#### Method_missng\n`method_missing`, it?s the feature that puts the magic in Rails?s find_by_* methods. Defining all these find_by_* methods by hand is nearly impossible as there?s a large number of combinations and they?re based on columns in the database.\n\n##### Example\n```\nclass MyClass\n  def foo(bar)\n    17\n  end\n \n  def do_something(what, ntimes)\n    puts "Something happened!"\n  end\nend\n```\n\n```\nclass Tracer\n  def initialize(obj)\n    @obj = obj\n  end\n  def method_missing(method_name, *args)\n    puts "Called #{method_name} with args: #{args * \', \'}"\n    @obj.send(method_name,*args)\n  end\nend\n```\n\nCall the method\n\n```\nmyclass = MyClass.new\nwrapped_class = Tracer.new(myclass)\nwrapped_class.do_something("blah", 5)\nwrapped_class.foo(89)\n```\n\n```\nCalled do_something with args: blah, 5\nSomething happened!\nCalled foo with args: 89\n17\n```\n',
  },
  {
    title: "Precedence",
    description: "Understanding operator precedence in Ruby",
    date: "2013-10-27T00:00:00.000Z",
    tags: ["ruby", "programming", "advanced"],
    image:
      "https://media.geeksforgeeks.org/wp-content/uploads/20190708163349/Operators-Precedence.jpg",
    draft: false,
    slug: "precedence",
    content:
      "\nToday when practised Ruby, I encountered an issue about precedence.\n\n##### Common sense\nLet's start with simple exercise, the old fashion `if` statement is as below\n\n```ruby\nif a > b\n  1\nelse\n  2\nend \n```\nAnd we can also shorten to  `a > b ? 1 : 2`. Easy right? Please look at the next example.\n\n##### Dictionary Class\n\n```ruby\nclass Dictionary\n\n  def initialize\n    @entries = {}\n  end\n\n  def entries\n    @entries\n  end\n\n  def add(entry)\n    if entry.is_a? Hash\n      @entries.merge!(entry)\n    else\n      @entries[entry] = nil\n    end\n  end\n\n  def include?(key)\n    @entries.key?(key)\n  end\n\nend\n```\nIf we do \n\n```ruby\nd = Dictionary.new\nd.include?'nothing' ? d.entries['nothing'] : nil\n```\n\nI was expecting the result is *nil*. But it returns *false* and throws warning `string literal in condition`. What is it??\n\n##### Investigation\nIn Ruby, if on a non-boolean input will check existence, the check for existence with ?? considered true; you receive a warning (warning: string literal in condition)\n\n```ruby\n> \"1\" ? 1 : 2\n(irb): warning: string literal in condition\n => 1\n```\n\nSo, d.include? is executed without 'nothing'. Then the codes become: \n`'nothing' ? d.entries['nothing'] : nil`\n\n##### Solution\nAdd a bracket for 'nothing', \n\n```ruby\nd = Dictionary.new\nd.include?('nothing') ? d.entries['nothing'] : nil\n\n => nil \n```\n\nYay! So, please do remember add the bracket if using `? :` expression.\n",
  },
  {
    title: "Add the ability to forward email in MailCatcher",
    description: "Extending MailCatcher with email forwarding capabilities",
    date: "2013-10-24T00:00:00.000Z",
    tags: ["ruby", "rails", "testing", "tools"],
    image:
      "https://res.cloudinary.com/practicaldev/image/fetch/s--jvDLhx0b--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/cpcr5w0kgl6j94tss7n9.png",
    draft: false,
    slug: "add-the-ability-to-forward-email-in-mailcatcher",
    content:
      "\nHaven't updated the blog for a few days. It is very busy these days, in the [Agile software development](http://en.wikipedia.org/wiki/Agile_software_development). It's very good software development process. The good thing is everyone is very involved. We all want to be valuable for the team.\n\nOK, let's get into the topic. **Add the ability to forward email in MailCatcher**\n\n### MailCatcher\nThis is the [github repository](https://github.com/sj26/mailcatcher).\n\n### Running from the source code\nWe now have the source code. The next step is to edit the source code and test it locally. As we will see the source code, it's suppose to execute as a gem. So we will need to pack it as a gem and install it\n\n```\ngem build mailcatcher.gemspec\ngem install mailcatcher-0.5.12.gem\n```\n\nThen run `mailcatcher` in the terminal to start it, now, visit `localhost:1080`, MailCatcher is there!\n\n### The key points\n- `not windows?` is definitely needed, otherwise in windows we will get exception.\n- in `application.js`, it uses ajax to send a request to `/messages/:id/:recipient/deliver`\n- the request will be handled in `web.rb`\n- `web.rb` is called `DeliveryService`\n",
  },
  {
    title: "Array#in_group_of - Ruby on Rails",
    description: "Using in_group_of method for array manipulation in Rails",
    date: "2013-10-17T00:00:00.000Z",
    tags: ["ruby", "rails", "programming"],
    image:
      "https://res.cloudinary.com/practicaldev/image/fetch/s--jvDLhx0b--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/cpcr5w0kgl6j94tss7n9.png",
    draft: false,
    slug: "array-in_group_of-ruby-on-rails",
    content:
      "\n[This is](http://stackoverflow.com/questions/12376798/rails-haml-adding-a-parentclass-every-n-iteration) awesome in order to combine with haml\n",
  },
  {
    title: "Automation Test with Rspec and Capybara",
    description: "Automated testing with RSpec and Capybara",
    date: "2013-10-14T00:00:00.000Z",
    tags: ["testing", "automation", "rspec", "capybara"],
    image:
      "https://blog.testproject.io/wp-content/uploads/2021/01/Test-your-Ruby-waters-with-Capybara.jpg",
    draft: false,
    slug: "automation-test-with-rspec-and-capybara",
    content:
      "\nToday I completed a refactoring task for our existing automation test repository. Briefly, we have a site creator which has a seven-step wizard.\n\nI wrote a spec for the site creator which will finish each step automatically as well as experiment the wizard. There are several tricky things for this task. I will summarise them as below.\n\n#### Test each step independently\nThere are seven steps for the site creator wizard. Normally user will finish step by step. However, as for testing, we need to make sure each test (`example` for Rspec) is independent. That means if Rspec run my `site_creator_spec`, the tests can be ran randomly.\n\n#### DRY the codes\nAbove we are saying testings for steps must be independent. But due to the nature of wizard, we need to finish the previous steps before testing steps in the middle. That means, if want to test step 3, we need to finish step 1 and 2; to test step 6, step 1, 2, 3, 4, 5 must be finished.\n\nSo obviously there are plenty of places we could make redundancy. What I have done is to finish my own code, regardless how dirty, duplicate it is. Then I did `DRY`. The result is that I make my codes extremely clear and readable.\n\n#### Randomly pick element\nThere are many radios on the site creator. One way is to write test cases for each of them. But it's a bit waste of time and duplicate. Instead, we can store all radios in an array, then randomly pick one.\n\nIt's Monday but I still feel good, as I have finished my work properly. The more exciting is that I can keep practicing my Ruby skills.\n\nI am not just QA, I am a **Developer in QA** ;-)\n",
  },
  {
    title: "QA beginner for a month",
    description: "A month-long journey into quality assurance testing",
    date: "2013-10-13T00:00:00.000Z",
    tags: ["testing", "qa", "experience"],
    image:
      "https://elmosoftware.co.uk/wp-content/uploads/sites/3/2019/12/Quality-Assurance.png",
    draft: false,
    slug: "qa-beginner-for-a-month",
    content:
      "\nI have worked as a developer in QA for a month. In general it's good, a new position and a new environment (of course people in here are also very nice!). I would like to review what I have learned last two month and what could be important for us.\n\n#### Orientation\nThe first thing to get started in a new company is to be familiar with the environment. I got a long page of new starter on my first day. Another important thing is to get introduced to colleagues.\n\nIn my opinion, **interpersonal relationship** is crucial in the company. Especially for QA, something it might be more important than your responsibility. Good relationships can \nsmooth coordination of all aspects of the work.\n\n#### Test cases\nSince I don't have commercial experience in QA, my manager assigned a senior QA engineer to give me a tutorials, which is really helpful. I have learned to use [TestRails](http://www.gurock.com/testrail/) to create test cases. To use test cases through out the QA process makes I feel confident with my QA result.\n\n#### Test automation\nThe team have built test automation for a year and achieved a great success. As a developer in QA, I can use my programming background to help in test automation. However, as a new starter point of view, our automation could be a little hard to pick up. The reasons are:\n\n- Configuration files are located in different folders.\n- All methods are loaded into memory at the beginning. Even they are not required.\n- Have to learn all modules for a single spec.\n- Methods are called by an irrelevant object.\n- Too many unknown codes. No one knows why it's there.\n\nWithout admiration of their wonderful achievement, I just hope we can refactor the codebase structure at some point. I believe it's beneficial for all of us.\n\nNot sure whether this post makes sense. But I will definite share my learning here, and hope can discuss with all `Hackers`. **NEVER STOP LEARNING**\n",
  },
  {
    title: "Rspec environmental Variable",
    description: "Managing environment variables in RSpec tests",
    date: "2013-10-13T00:00:00.000Z",
    tags: ["ruby", "testing", "rspec"],
    image:
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1623416109911/DAFpo-cNa.png",
    draft: false,
    slug: "rspec-environmental-variable",
    content:
      "\n#### What is Environment Variable?\n> Environment variables are variables passed to programs by the command line or the graphical shell. Though there are a number of environment variables that only affect the command line or graphical shell itself (such as PATH or HOME), there are also several that directly affect how Ruby scripts execute.\n\n#### How to use it?\nFor example, in your spec, add a code:\n\n```ruby\nsomething = ENV['SOMETHING']\n```\n\nThen in the command line, use:\n\n```ruby\nSOMETHING=1000\n```\n\nVariable `something` will now be assigned to 1000.\n",
  },
  {
    title: "First post",
    description: "Welcome to my blog about software development and learning",
    date: "2013-10-12T00:00:00.000Z",
    tags: ["personal", "introduction"],
    image: "/assets/images/posts/1-chalkboard.jpg",
    draft: false,
    slug: "first-post",
    content:
      "\nWoohoo, my blog is done.\n\nI will start to post my ruby learning in here. In the meantime, will also share my experiences. I hope this can help all of us to learn and to be progressed.\n\nThis blog is supporting [github-flavored-markdown](https://help.github.com/articles/github-flavored-markdown). It's better than `WYSIWYG`.\n\nIt's late now in the UK, heading to the bed.\n\nFingers crossed I can get more and more people to share opinions and learn together.\n",
  },
];
